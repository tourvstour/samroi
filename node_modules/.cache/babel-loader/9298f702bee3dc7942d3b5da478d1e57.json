{"ast":null,"code":"var storName = {\n  score: []\n};\n\nvar reducers = function reducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : storName;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      var input = function input() {\n        if (state.score.length == \"0\") {\n          var stat = \"insert_f\";\n          return stat;\n        } else {\n          state.score.forEach(function (Arrays) {\n            var numStore = Arrays.num,\n                listStore = Arrays.list,\n                valueStore = Arrays.values,\n                numAdd = action.datas.num,\n                listAdd = action.datas.list,\n                valueAdd = action.datas.values; //  console.log(numStore, listStore, valueStore, numAdd, listAdd, valueAdd)\n\n            if (numStore == numAdd && listStore == listAdd && valueStore != valueAdd) {\n              var _stat = \"update\"; // console.log(stat)\n\n              return _stat;\n            } else {\n              var _stat2 = \"insert_l\"; // console.log(stat)\n\n              return _stat2;\n            }\n          });\n        }\n      };\n\n      var mess = input();\n      console.log(mess);\n\n      if (mess == \"insert_f\") {\n        return Object.assign({}, state, {\n          score: state.score.concat([action.datas])\n        });\n      } else if (mess == \"insert_l\") {\n        return Object.assign({}, state, {\n          score: state.score.concat([action.datas])\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["I:\\ANYcode\\react\\ther-app\\src\\reducers.js"],"names":["storName","score","reducers","state","action","type","input","length","stat","forEach","Arrays","numStore","num","listStore","list","valueStore","values","numAdd","datas","listAdd","valueAdd","mess","console","log","Object","assign","concat"],"mappings":"AAAA,IAAMA,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE;AADM,CAAjB;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAA8B;AAAA,MAA7BC,KAA6B,uEAArBH,QAAqB;AAAA,MAAXI,MAAW;;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,UAAIC,KAAK,GAAG,SAARA,KAAQ,GAAM;AACd,YAAIH,KAAK,CAACF,KAAN,CAAYM,MAAZ,IAAsB,GAA1B,EAA+B;AAC3B,cAAIC,IAAI,GAAG,UAAX;AACA,iBAAQA,IAAR;AACH,SAHD,MAIK;AACDL,UAAAA,KAAK,CAACF,KAAN,CAAYQ,OAAZ,CAAoB,UAAAC,MAAM,EAAI;AAC1B,gBAAIC,QAAQ,GAAGD,MAAM,CAACE,GAAtB;AAAA,gBACIC,SAAS,GAAGH,MAAM,CAACI,IADvB;AAAA,gBAEIC,UAAU,GAAGL,MAAM,CAACM,MAFxB;AAAA,gBAGIC,MAAM,GAAGb,MAAM,CAACc,KAAP,CAAaN,GAH1B;AAAA,gBAIIO,OAAO,GAAGf,MAAM,CAACc,KAAP,CAAaJ,IAJ3B;AAAA,gBAKIM,QAAQ,GAAGhB,MAAM,CAACc,KAAP,CAAaF,MAL5B,CAD0B,CAO1B;;AAEA,gBAAIL,QAAQ,IAAIM,MAAZ,IAAsBJ,SAAS,IAAIM,OAAnC,IAA8CJ,UAAU,IAAIK,QAAhE,EAA0E;AACtE,kBAAIZ,KAAI,GAAG,QAAX,CADsE,CAEtE;;AACA,qBAAQA,KAAR;AACH,aAJD,MAKK;AACD,kBAAIA,MAAI,GAAG,UAAX,CADC,CAED;;AACA,qBAAQA,MAAR;AACH;AACJ,WAnBD;AAoBH;AACJ,OA3BD;;AA4BA,UAAIa,IAAI,GAAGf,KAAK,EAAhB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,UAAIA,IAAI,IAAI,UAAZ,EAAwB;AACpB,eAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,KAAlB,EAAyB;AAC5BF,UAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYyB,MAAZ,CAAmB,CAACtB,MAAM,CAACc,KAAR,CAAnB;AADqB,SAAzB,CAAP;AAGH,OAJD,MAKK,IAAIG,IAAI,IAAI,UAAZ,EAAwB;AACzB,eAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,KAAlB,EAAyB;AAC5BF,UAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYyB,MAAZ,CAAmB,CAACtB,MAAM,CAACc,KAAR,CAAnB;AADqB,SAAzB,CAAP;AAGH;;AACL;AACI,aAAOf,KAAP;AA3CR;AA6CH,CA9CD;;AAgDA,eAAeD,QAAf","sourcesContent":["const storName = {\r\n    score: [],\r\n\r\n}\r\n\r\nconst reducers = (state = storName, action) => {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            let input = () => {\r\n                if (state.score.length == \"0\") {\r\n                    let stat = \"insert_f\"\r\n                    return (stat)\r\n                }\r\n                else {\r\n                    state.score.forEach(Arrays => {\r\n                        let numStore = Arrays.num,\r\n                            listStore = Arrays.list,\r\n                            valueStore = Arrays.values,\r\n                            numAdd = action.datas.num,\r\n                            listAdd = action.datas.list,\r\n                            valueAdd = action.datas.values\r\n                        //  console.log(numStore, listStore, valueStore, numAdd, listAdd, valueAdd)\r\n\r\n                        if (numStore == numAdd && listStore == listAdd && valueStore != valueAdd) {\r\n                            let stat = \"update\"\r\n                            // console.log(stat)\r\n                            return (stat);\r\n                        }\r\n                        else {\r\n                            let stat = \"insert_l\"\r\n                            // console.log(stat)\r\n                            return (stat);\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            let mess = input();\r\n            console.log(mess)\r\n            if (mess == \"insert_f\") {\r\n                return Object.assign({}, state, {\r\n                    score: state.score.concat([action.datas])\r\n                })\r\n            }\r\n            else if (mess == \"insert_l\") {\r\n                return Object.assign({}, state, {\r\n                    score: state.score.concat([action.datas])\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducers;"]},"metadata":{},"sourceType":"module"}