{"ast":null,"code":"import _objectSpread from \"I:\\\\ANYcode\\\\react\\\\ther-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar storName = {\n  score: []\n};\n\nvar reducers = function reducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : storName;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      var input = '';\n\n      if (state.score.length == \"0\") {\n        input = \"insert_f\";\n      } else {\n        state.score.forEach(function (Arrays) {\n          var numStore = Arrays.num,\n              listStore = Arrays.list,\n              valueStore = Arrays.values,\n              numAdd = action.datas.num,\n              listAdd = action.datas.list,\n              valueAdd = action.datas.values;\n          console.log(numStore, listStore, valueStore, numAdd, listAdd, valueAdd);\n\n          if (numStore === numAdd && listStore === listAdd && valueStore !== valueAdd) {\n            // console.log(\"update\")\n            input = \"update\";\n          } else if (numStore === numAdd && listStore === listAdd && valueStore === valueAdd) {\n            input = \"update\";\n          } else if (numStore !== numAdd && listStore !== listAdd) {\n            input = \"insert_l\";\n          }\n        });\n      }\n\n      var mess = input;\n      console.log(\"msg==>\", mess);\n\n      if (mess === \"insert_f\") {\n        return Object.assign({}, state, {\n          score: state.score.concat([action.datas])\n        });\n      } else if (mess === \"insert_l\") {\n        return Object.assign({}, state, {\n          score: state.score.concat([action.datas])\n        });\n      } else if (mess === \"update\") {\n        console.log(state.score);\n        return Object.assign({}, state, {\n          score: state.score.map(function (inp) {\n            if (inp.list === action.datas.list && inp.num === action.datas.num) {\n              return _objectSpread({}, inp, {\n                num: action.datas.num,\n                list: action.datas.list,\n                values: action.datas.values\n              });\n            }\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["I:\\ANYcode\\react\\ther-app\\src\\reducers.js"],"names":["storName","score","reducers","state","action","type","input","length","forEach","Arrays","numStore","num","listStore","list","valueStore","values","numAdd","datas","listAdd","valueAdd","console","log","mess","Object","assign","concat","map","inp"],"mappings":"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","sourcesContent":["const storName = {\r\n    score: []\r\n}\r\n\r\nconst reducers = (state = storName, action) => {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            let input = '';\r\n            if (state.score.length == \"0\") {\r\n                input = \"insert_f\"\r\n            }\r\n            else {\r\n                state.score.forEach(Arrays => {\r\n                    let numStore = Arrays.num,\r\n                        listStore = Arrays.list,\r\n                        valueStore = Arrays.values,\r\n                        numAdd = action.datas.num,\r\n                        listAdd = action.datas.list,\r\n                        valueAdd = action.datas.values\r\n                    console.log(numStore, listStore, valueStore, numAdd, listAdd, valueAdd)\r\n\r\n                    if (numStore === numAdd && listStore === listAdd && valueStore !== valueAdd) {\r\n                        // console.log(\"update\")\r\n                        input = \"update\"\r\n                    }\r\n                    else if (numStore === numAdd && listStore === listAdd && valueStore === valueAdd) {\r\n                        input = \"update\"\r\n                    }\r\n                    else if (numStore !== numAdd && listStore !== listAdd) {\r\n                        input = \"insert_l\"\r\n                    }\r\n\r\n                })\r\n            }\r\n\r\n            let mess = input;\r\n            console.log(\"msg==>\", mess)\r\n            if (mess === \"insert_f\") {\r\n                return Object.assign({}, state, {\r\n                    score: state.score.concat([action.datas])\r\n                })\r\n            }\r\n            else if (mess === \"insert_l\") {\r\n                return Object.assign({}, state, {\r\n                    score: state.score.concat([action.datas])\r\n                })\r\n            }\r\n            else if (mess === \"update\") {\r\n                console.log(state.score)\r\n                return Object.assign({}, state, {\r\n                    score: state.score.map((inp) => {\r\n                        if (inp.list === action.datas.list && inp.num === action.datas.num) {\r\n                            return {\r\n                                ...inp,\r\n                                num: action.datas.num,\r\n                                list: action.datas.list,\r\n                                values: action.datas.values\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducers;"]},"metadata":{},"sourceType":"module"}